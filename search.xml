<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS跳转源码获取</title>
      <link href="/2022/06/15/%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF/%E5%8A%A8%E6%80%81%E9%A1%B5%E9%9D%A2JS%E8%B7%B3%E8%BD%AC%EF%BC%8C%E6%80%8E%E6%A0%B7%E8%8E%B7%E5%8F%96%E6%BA%90%E7%A0%81%EF%BC%9F/"/>
      <url>/2022/06/15/%E7%88%AC%E8%99%AB%E6%8A%80%E6%9C%AF/%E5%8A%A8%E6%80%81%E9%A1%B5%E9%9D%A2JS%E8%B7%B3%E8%BD%AC%EF%BC%8C%E6%80%8E%E6%A0%B7%E8%8E%B7%E5%8F%96%E6%BA%90%E7%A0%81%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="python爬虫：解决网页重定向问题"><a href="#python爬虫：解决网页重定向问题" class="headerlink" title="python爬虫：解决网页重定向问题"></a>python爬虫：解决网页重定向问题</h1><p>最近在做一个爬虫项目，从大数据中提取网络指纹。我们知道爬虫的基本流程是提取数据到正则筛选，笔者在实际项目中发现有很多站点会出现<strong>js重定向</strong>问题。</p><p>通俗点解释就是：浏览器可以正常解析，在域名后会拼接路径访问。</p><p><img src="https://cdn.jsdelivr.net/gh/Ict-t/picodemo/img/202206151224726.png" alt="image-20220615121037665"></p><p>但是我们在代码中实际请求时不会得到正常的返回，因为js代码并未执行。</p><p><img src="https://cdn.jsdelivr.net/gh/Ict-t/picodemo/img/202206151224364.png" alt="image-20220615120745761"></p><p>在遇到这个问题时，我的第一个想法是从返回的源码中利用正则去提取js中的路径，然后进行二次拼接进行站点访问。但是在实际应用中发现效果并不好（可能是我的正则写的比价烂😰）。最后用的解决办法是用了无头浏览器headless进行源码提取，最终成功的应用在了程序的模块中。具体代码放在后文中。</p><h2 id="三种重定向问题"><a href="#三种重定向问题" class="headerlink" title="三种重定向问题"></a>三种重定向问题</h2><ul><li>服务器端重定向：在服务器端完成，如响应码是301、302。一般来说爬虫可以自适应。如果不能自适应的话可以冲返回头中提取Location字段</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Ict-t/picodemo/img/202206151224923.png" alt="image-20220615121908587"></p><ul><li><p>meta refresh：网页中的<meta>标签声明了网页重定向的链接，这种重定向由浏览器完成，需要编写代码进行处理</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0.1;url=http://www.redirectedtoxxx.com/&quot;&gt;&lt;!--本网页会在0.1秒内refresh为url所指的网页--&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>解决办法是通过得到跳转前的页面源码，从中提取出重定向url信息（上述代码第三行中的url属性值）。一个具体的操作：①使用xpath(‘&#x2F;&#x2F;meta[@http-equiv&#x3D;”refresh” and @content]&#x2F;@content’)提取出content的值 ②使用正则表达式提取出重定向的url值。</p></li><li><p>js重定向，通过JavaScript代码形式进行重定向。如下面JavaScript代码</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script language=javascript&gt;window.location.href=&#x27;http://www.redirectedtoxxx.com&#x27;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>我的解决方法：通过无头浏览器进行解析，需要下载与浏览器相匹配的驱动程序chromedriver.exe</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def get_html(self,url_list,result):</span><br><span class="line">        chrome_options = webdriver.ChromeOptions()</span><br><span class="line">        chrome_options.add_argument(&#x27;--no-sandbox&#x27;)</span><br><span class="line">        chrome_options.add_argument(&#x27;--headless&#x27;)</span><br><span class="line">        chrome_options.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-logging&#x27;])</span><br><span class="line">        chrome_options.add_argument(&#x27;--ignore-certificate-errors&#x27;)</span><br><span class="line">        chrome_options.add_argument(&#x27;--disable-gpu&#x27;)</span><br><span class="line">        chrome_driver = r&quot;E:\Anaconda3\Lib\site-packages\selenium\webdriver\chromedriver.exe&quot;</span><br><span class="line">        browser = webdriver.Chrome(executable_path=chrome_driver,options=chrome_options)</span><br><span class="line">        for url in url_list:</span><br><span class="line">            if not url.startswith(&#x27;http&#x27;):</span><br><span class="line">                url = &#x27;http://&#x27; + url </span><br><span class="line">            data = &#x27;&#x27;</span><br><span class="line">            try:</span><br><span class="line">                browser.get(url)</span><br><span class="line">                data = browser.page_source</span><br><span class="line">                if data !=&#x27;&#x27;:</span><br><span class="line">                    if self.get_info(str(data),result):</span><br><span class="line">                        break</span><br><span class="line">                else:</span><br><span class="line">                    continue</span><br><span class="line">            except Exception:</span><br><span class="line">                print(&quot;无法访问&quot;)</span><br><span class="line">                continue</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人图床的搭建</title>
      <link href="/2022/06/09/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/06/09/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="个人图床的搭建（Typora-picgo-github）"><a href="#个人图床的搭建（Typora-picgo-github）" class="headerlink" title="个人图床的搭建（Typora+picgo+github）"></a>个人图床的搭建（Typora+picgo+github）</h1><h2 id="什么是图床？"><a href="#什么是图床？" class="headerlink" title="什么是图床？"></a>什么是图床？</h2><p><strong>图床：</strong>用来存放图片，同时允许你把图片对外连接的网上空间</p><h2 id="为什么要使用图床"><a href="#为什么要使用图床" class="headerlink" title="为什么要使用图床"></a>为什么要使用图床</h2><p>为什么要使用图床？有很多小伙伴在工作汇报或是互联网上分享日常、博客等都喜欢用Markdown的方式去编辑文字。这种方式使得文字工作者专注于文字，而非格式，双手可以彻底的解放鼠标，大大提高了效率。试想一下，如果你的导师让你准备一篇工作汇报，你插入了本地的图片，但是老师接收到的文档插图确是一串不明所以的路径…..是不是很尴尬😅。</p><h2 id="图床的搭建"><a href="#图床的搭建" class="headerlink" title="图床的搭建"></a>图床的搭建</h2><p>获取图床的途径有很多种，这里就介绍GitHub图床的使用。不要钱的才是最香的😎</p><ul><li>github 新建仓库用于存放图片</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Ict-t/picodemo/img/202206111224516.png" alt="image-20220611122349838"></p><ul><li>下载图床管理工具PicGo</li></ul><p><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo工具下载页</a> </p><p>一直翻到最下面，选择你的电脑对应的可执行文件，windows的小伙伴选择红框的就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/Ict-t/picodemo/img/202206111230127.png" alt="image-20220611123034959"></p><ul><li>PicGo的配置</li></ul><p>仓库名称：git账户名+刚创建的仓库名称（记得把中间的空格给删除）</p><p>分支名称、存储路径、自定义域名可以照着我得格式写</p><p><img src="https://cdn.jsdelivr.net/gh/Ict-t/picodemo/img/202206111250478.png" alt="image-20220611123151181"></p><p>设定Token：在个人github的setting种点击Development setting选项 ，找到Penson access tokens 点击 Generate token，记得勾选repo。复制即可（建议保存）</p><p><img src="https://cdn.jsdelivr.net/gh/Ict-t/picodemo/img/202206111236111.png" alt="image-20220611123451056"></p><p><img src="https://cdn.jsdelivr.net/gh/Ict-t/picodemo/img/202206111236852.png" alt="image-20220611123545008"></p><p><img src="https://cdn.jsdelivr.net/gh/Ict-t/picodemo/img/202206111250537.png" alt="img"></p><ul><li><p>与typora关联</p><p>点击文件-&gt;偏好设置 进入配置中心</p><p>1、选择PicGo(app)</p><p>2、选择picgo.exed 安装路径</p><p>3、验证图片是否可以正常上传</p><p><img src="https://cdn.jsdelivr.net/gh/Ict-t/picodemo/img/202206111249166.png" alt="image-20220611124720537"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Ict-t/picodemo/img/202206111249017.png" alt="image-20220611124937017"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li>写文档时插入本地图片</li><li>右键选择上传图片</li><li>成果上传图片至远程仓库</li></ul><p>可以看见图片的地址已经不在是本地路径。大功告成了🤞</p><p><img src="https://cdn.jsdelivr.net/gh/Ict-t/picodemo/img/202206111255860.png" alt="image-20220611125328576"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="/2022/06/09/myself/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
      <url>/2022/06/09/myself/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="个人简历"><a href="#个人简历" class="headerlink" title="个人简历"></a>个人简历</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><ul><li><p>姓名：王灿</p></li><li><p>学历：全日制硕士</p></li><li><p>年龄：25</p></li><li><p>电话：19556631638</p></li><li><p>邮箱：<a href="mailto:&#x69;&#x63;&#116;&#x5f;&#116;&#116;&#x74;&#x40;&#x31;&#x36;&#51;&#x2e;&#99;&#111;&#109;">&#x69;&#x63;&#116;&#x5f;&#116;&#116;&#x74;&#x40;&#x31;&#x36;&#51;&#x2e;&#99;&#111;&#109;</a></p></li><li><p>政治面貌：中共预备党员</p></li><li><p>期望岗位：安全渗透、数据安全</p></li></ul><h2 id="在校经历"><a href="#在校经历" class="headerlink" title="在校经历"></a>在校经历</h2><h4 id="本科："><a href="#本科：" class="headerlink" title="本科："></a><strong>本科：</strong></h4><ul><li>三好学生、学雷锋先进个人、优秀团员</li><li>计算机软件考试中级软件设计师、数据库工程师</li><li>参加科大讯飞 JAVA开发岗位实习生</li><li>带领八人团队，开设200人的暑期辅导班</li></ul><h4 id="硕士："><a href="#硕士：" class="headerlink" title="硕士："></a>硕士：</h4><ul><li>校一等奖学金</li><li>参与安徽省重点研究与开发项目 - 边云协同网络安全感知与防御研发与应用</li><li>申报2021年度安徽省研究生科研项目 - 梯度自适应上传的异步联邦学习研究</li><li>再审论文 “Website Fingerprint Attack on Tor Traffic Sites Defended by WTF-PAD”一篇</li><li>发表加密流量、指纹识别相关专利四篇，其中一篇已授权</li><li>参与指纹识别工具 ”云悉指纹“ 的研发</li><li>参与杭州安恒信息指纹平台的构建</li></ul><h2 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h2><ul><li>能够分析内网流量</li><li>对nmap有一些了解，能独立搭建测试环境，编写指纹探测探针，lua脚本</li><li>熟悉java语法，基本掌握Sping、SpringMVC、mybatis等java开源框架，以及多线程、Java集合框架等原理</li><li>掌握python语法。硕士期间接触python，利用其写过多个脚本工具、漏洞扫描工具</li><li>熟悉安全测试流程，熟悉BURPSUITE，SQLMAP，NESUSS，NMAP，AWVS，等主流安全测试工具的使用</li><li>熟悉常见的web漏洞,对SQL注入、XSS、文件上传、反序列化等常见的web安全漏洞原理及利用</li><li>熟悉信息收集手法手段 端口、子域名、目录、指纹识别、旁站、C段</li><li>熟练编写漏洞poc、exp</li><li>对爬虫、正则有一定的基础，熟练使用selenium框架</li></ul><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><p><strong>杭州安恒信息技术股份有限公司                   2022.02 -至今                       安全研究院</strong></p><p>工作内容：</p><ul><li>指纹自动化提取工具研发（基于fofa）</li><li>对大数据聚类提取指纹脚本研发（基于sumap）</li><li>指纹整理（整理四千条不常见指纹）</li><li>各种爬虫脚本</li><li>对nmap的二次开发：搭环境、写探针、写lua脚本</li><li>学习代码审计、参与公司众测平台</li></ul><p>工作业绩：</p><ul><li>专利一篇（二作） ”一种基于内容差异的WEB应用首页识别特征规则提取方法”</li><li>在实习期间，参与到部门的实际项目中，能按时完成需求</li></ul><p><strong>安徽三实软件科技有限公司                       2021.03-2021.08（非全日制在职）                    安全研发部</strong></p><p>工作内容：</p><ul><li>编写漏洞poc</li><li>负责云悉指纹项目，内网流量分析模块 (被动分析、主动探测)</li></ul><p>工作业绩：</p><ul><li>提交了多个漏洞</li><li>在分析内网流量的过程中发表专利一篇 “基于传输层特征的智能操作系统识别方法”</li></ul><p>项目收获：</p><ul><li>对网络协议有了更深的理解</li><li>认识到同事之间的交流沟通实非常重要的，自身的能力还很薄弱，要虚心请教，完善自身。</li></ul><p><strong>安徽工业大学                              2020.07-至今                           网络安全与智能感知实验室</strong></p><p>项目名称：边云协同网络安全感知与防御研发与应用</p><p>项目描述：</p><ul><li>研发以资产为中心的安全资产管理系统</li><li>研发自动化网络安全脆弱性评估与挖掘工具</li><li>构建网络安全大数据与智能安全感知模型</li><li>研发边云协同动态网络安全检测与防御系统</li></ul><p>我的工作：</p><ul><li>收集多种流量，打标签</li><li>整理漏洞库（多人参与）</li><li>构建网站指纹识别系统</li><li>对Tor加密流量研究，研发模型</li></ul><p>收获：</p><ul><li><p>通过阅读了大量加密流量相关文献，对Tor加密的攻防有了清晰的认知，并提出了一种新的思路去识别使用WTF-PAD型Tor流量</p></li><li><p>在每次组会被导师指导中，逻辑思维能力有了一些提升，对待问题也学会了怎样去分析解决。</p></li></ul><p>项目名称：等保工具箱 安全基线检测</p><p>项目描述：linux、windows、数据库基线检测</p><p>进度：正在研发设计中</p><h2 id="自我评价："><a href="#自我评价：" class="headerlink" title="自我评价："></a>自我评价：</h2><ul><li>乐观开朗，适应能力强</li><li>喜欢找缺陷和思考，喜欢和志同道合的人研究技术</li><li>最近半年加入了健身的大部队，坚持每天健身一小时</li><li>对待工作谨慎、认真负责，好学，上进。</li><li>对安全有着强烈的兴趣爱好。</li><li>有良好的代码阅读编写能力。</li><li>具备良好的沟通能力和高度的团队合作意识，能快速融入团队</li><li>技术视野开阔，对业界新技术敏感，喜欢钻研，具有良好的学习能力并注重团队合作</li><li>热爱计算机，在工作中，有着强烈的责任心，能保持不断进取的精神，有高度执行力</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hahah </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LifeShare</title>
      <link href="/2022/06/09/life_share/hello-world/"/>
      <url>/2022/06/09/life_share/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在这里我会开始分享一些学习心得和日常生活，喜欢我就给个关注吧🎉</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
